<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700&display=swap" rel="stylesheet">
    <style>






h1 {
  text-align: center;
  color: #2c3e50;
  margin-bottom: 30px;
  font-size: 32px;
}

/* Button styles */
#buttons {
  display: flex;
  justify-content: center;
  gap: 15px;
  margin-bottom: 30px;
}

.button {
  background-color: #3498db;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 5px;
  cursor: pointer;
  font-weight: bold;
  transition: background-color 0.3s;
}

.button:hover {
  background-color: #2980b9;
}

.button:active {
  transform: translateY(1px);
}

/* Table styles */
table {
  width: 100%;
  border-collapse: collapse;
  box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1);
  margin-bottom: 30px;
  display: none; /* Hide tables by default */
  background-color: white;
}

/* Show the active table */
table.active {
  display: table;
}

table th {
  background-color: #2c3e50;
  color: white;
  padding: 12px 15px;
  text-align: left;
  font-weight: bold;
  border: 1px solid #ddd;
}

table td {
  padding: 10px 15px;
  border: 1px solid #ddd;
}

/* Zebra striping for rows */
table tr:nth-child(even) {
  background-color: #f2f2f2;
}

table tr:hover {
  background-color: #e6f7ff;
}

/* Responsive styles */
@media (max-width: 768px) {
  #buttons {
    flex-direction: column;
    align-items: center;
  }
  
  table th, table td {
    padding: 8px 10px;
    font-size: 14px;
  }
  
  h1 {
    font-size: 24px;
  }
}
.active-btn {
  background-color: #1c638d;
}

td:nth-child(5) {
  text-align: right;
}

        body {
            font-family: 'Nunito', sans-serif;
            background-color: #1e1e2d;
            margin: 0;
            padding: 2rem;
            color: #ffffff;
        }
        .dashboard-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            background-color: #151521;
            box-shadow: 0 4px 25px 0 rgba(0, 0, 0, 0.1);
            border-radius: 12px;
        }
        h1 {
            color: #ffffff;
            font-size: 1.5rem;
            margin-bottom: 1.5rem;
            font-weight: 600;
        }
        .chart-container {
            width: 100%;
            height: 400px;
            padding: 1rem;
            background: #151521;
            border-radius: 8px;
            margin-top: 20px;
        }
        .time-period-selector {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            background: #1a1a27;
            padding: 10px;
            border-radius: 8px;
            justify-content: center;
        }
        .time-period-selector button {
            padding: 8px 16px;
            background: #2a2a3e;
            border: none;
            color: #ffffff;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-family: 'Nunito', sans-serif;
        }
        .time-period-selector button:hover {
            background: #435ebe;
        }
        .time-period-selector button.active {
            background: #435ebe;
        }
        .chart-container {
            position: relative;
            margin: auto;
            height: 400px;
            width: 100%;
            margin-bottom: 2rem;
        }
        .card {
            transition: transform 0.2s;
        }
        .card:hover {
            transform: translateY(-5px);
        }
        .summary-card {
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .summary-icon {
            font-size: 2rem;
            opacity: 0.8;
        }
        .filter-section {
            background-color: #f8f9fa;
            padding: 1rem;
            border-radius: 10px;
            margin-bottom: 2rem;
        }
        .chart-type-buttons .btn {
            margin: 0 0.25rem;
        }
        .chart-controls {
            margin-bottom: 1rem;
        }
        @media (max-width: 768px) {
            .chart-container {
                height: 300px;
            }
            .chart-type-buttons {
                flex-wrap: wrap;
            }
            .chart-type-buttons .btn {
                margin: 0.25rem;
            }
        }
    </style>
</head>
<body>
    <%- include('../partials/admin/header') %>

    <div class="container-fluid">
        <div class="row">
            <button class="btn btn-dark d-md-none" onclick="toggleSidebar()" style="position: fixed; z-index: 1050">
                <i class="bi bi-list"></i>
            </button>

            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2">Sales Analytics</h1>
                </div>

                <!-- Summary Cards -->
                <div class="row g-4 mb-4">
                    <div class="col-12 col-sm-6 col-lg-2">
                        <div class="card bg-primary text-white summary-card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="card-title mb-0">Total Revenue</h6>
                                        <h3 class="mt-2 mb-0">₹<%= Math.floor(totals.revenue)  %></h3>
                                    </div>
                                    <i class="bi bi-currency-rupee summary-icon"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-sm-6 col-lg-2">
                        <div class="card bg-success text-white summary-card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="card-title mb-0">Total Orders</h6>
                                        <h3 class="mt-2 mb-0"><%= totals.totalOrders %></h3>
                                    </div>
                                    <i class="bi bi-cart-check summary-icon"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-sm-6 col-lg-2">
                        <div class="card bg-info text-white summary-card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="card-title mb-0">Total Items</h6>
                                        <h3 class="mt-2 mb-0"><%= totals.items %></h3>
                                    </div>
                                    <i class="bi bi-box summary-icon"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-sm-6 col-lg-3">
                        <div class="card bg-warning text-white summary-card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="card-title mb-0">Coupon Discounts</h6>
                                        <h3 class="mt-2 mb-0">₹<%= Math.floor(totals.couponDiscount )%></h3>
                                    </div>
                                    <i class="bi bi-ticket-perforated summary-icon"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-sm-6 col-lg-3">
                        <div class="card bg-danger text-white summary-card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="card-title mb-0">Product Discounts</h6>
                                        <h3 class="mt-2 mb-0">₹<%= Math.floor(totals.productDiscount)  %></h3>
                                    </div>
                                    <i class="bi bi-percent summary-icon"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Filter Section -->
                <div class="filter-section" style="display: flex; justify-content: center;">
                    <div class="row g-3"  >
                        
                        <div class="col-md-6">
                            <div class="btn-group chart-type-buttons" role="group">
                                <button type="button" class="btn btn-outline-primary active" onclick="changeTimeFrame('daily')">Daily</button>
                                <button type="button" class="btn btn-outline-primary" onclick="changeTimeFrame('weekly')">Weekly</button>
                                <button type="button" class="btn btn-outline-primary" onclick="changeTimeFrame('monthly')">Monthly</button>
                                <button type="button" class="btn btn-outline-primary" onclick="changeTimeFrame('yearly')">Yearly</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Charts -->
                <div class="row">
                    <div class="col-12">
                        <div class="card mb-4">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0">Revenue & Orders Overview</h5>
                                <div class="chart-controls">
                                    <button class="btn btn-sm btn-outline-secondary" onclick="toggleChartType('line')">
                                        <i class="bi bi-graph-up"></i> Line
                                    </button>
                                    <button class="btn btn-sm btn-outline-secondary" onclick="toggleChartType('bar')">
                                        <i class="bi bi-bar-chart"></i> Bar
                                    </button>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="chart-container">
                                    <canvas id="salesChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>














                <h1>Interactive Sales Data</h1>
                <div id="buttons">
                    <button class="button" onclick="showTable('products')">Best-Selling Products (Top 10)</button>
                    <button class="button" onclick="showTable('categories')">Best-Selling Categories (Top 10)</button>
                    <button class="button" onclick="showTable('brands')">Best-Selling Brands (Top 10)</button>
                </div>
            
                <table id="products-table">
                   
                        <tr>
                            <th>Rank</th>
                            <th>Product Name</th>
                            <th>Category</th>
                          
                            <th>Total Sold</th>
                        </tr>
                        <% if (sortedProducts.length > 0) { %>
                            <% sortedProducts.forEach((product, index) => { %>
                                <tr>
                                    <td><%= index + 1 %></td>
                                    <td><%= product.productname %></td>
                                    <td><%= product.category %></td>
                                    
                                    <td><%= product.totalSold %></td>
                                </tr>
                            <% }); %>
                        <% } else { %>
                            <tr>
                                <td colspan="6">No top-selling products found.</td>
                            </tr>
                        <% } %>
                    </table>
                    
                
            
                <!-- Categories Table -->
                <table id="categories-table">
                    <tr>
                        <th>Rank</th>
                        <th>Category Name</th>
                        <th>Total Sold</th>
                    </tr>
                    <% if (sortedCategories.length > 0) { %>
                        <% sortedCategories.forEach((category, index) => { %>
                            <tr>
                                <td><%= index + 1 %></td>
                                <td><%= category.category %></td>
                                <td><%= category.totalSold %></td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="3">No top-selling categories found.</td>
                        </tr>
                    <% } %>
                </table>
            
                <!-- Brands Table -->
                <table id="brands-table">
                    <tr>
                        <th>Rank</th>
                        <th>Brand Name</th>
                        <th>Total Sold</th>
                    </tr>
                    <% if (sortedBrands.length > 0) { %>
                        <% sortedBrands.forEach((brand, index) => { %>
                            <tr>
                                <td><%= index + 1 %></td>
                                <td><%= brand.brand %></td>
                                <td><%= brand.totalSold %></td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="3">No top-selling brands found.</td>
                        </tr>
                    <% } %>
                </table>
            </main>
        </div>
    </div>



    
    <%- include('../partials/admin/footer') %>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>




document.getElementById('products-table').classList.add('active');
function showTable(section) {
            
            document.getElementById('products-table').classList.remove('active');
            document.getElementById('categories-table').classList.remove('active');
            document.getElementById('brands-table').classList.remove('active');

            
            if (section === 'products' ) {
                document.getElementById('products-table').classList.add('active');
            } else if (section === 'categories') {
                document.getElementById('categories-table').classList.add('active');
            } else if (section === 'brands') {
                document.getElementById('brands-table').classList.add('active');
            }
        }

      






        const graphData = JSON.parse('<%- JSON.stringify(graphData) %>');

        console.log("d,ls,",graphData);
        
        let currentTimeFrame = 'daily';
        let currentChartType = 'line';
        let salesChart;

        function initializeChart() {
            const ctx = document.getElementById('salesChart').getContext('2d');
            const data = graphData[currentTimeFrame];

            console.log("data",data);
            

            if (!data || !data.labels || !data.revenue || !data.orders) {
                console.error('Invalid data format:', data);
                return;
            }
            data.labels.sort((a, b) => new Date(a) - new Date(b))
            console.log('Initializing chart with data:',  data.labels);

            salesChart = new Chart(ctx, {
                type: currentChartType,
                data: {
                    labels: data.labels,
                    datasets: [
                        {
                            label: 'Revenue',
                            data: data.revenue,
                            borderColor: 'rgb(75, 192, 192)',
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            yAxisID: 'y',
                            tension: 0.4
                        },
                        {
                            label: 'Delivered Orders',
                            data: data.orders,
                            borderColor: 'rgb(255, 99, 132)',
                            backgroundColor: 'rgba(255, 99, 132, 0.2)',
                            yAxisID: 'y1',
                            tension: 0.4
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    },
                    plugins: {
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.dataset.yAxisID === 'y') {
                                        label += '₹' + context.parsed.y.toFixed(2);
                                    } else {
                                        label += context.parsed.y;
                                    }
                                    return label;
                                }
                            }
                        },
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false
                            }
                        },
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Revenue (₹)'
                            },
                            ticks: {
                                callback: function(value) {
                                    return '₹' + value.toLocaleString();
                                }
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            title: {
                                display: true,
                                text: 'Number of Orders'
                            },
                            grid: {
                                drawOnChartArea: false
                            },
                            ticks: {
                                stepSize: 1
                            }
                        }
                    }
                }
            });
        }


        function updateChart() {
    if (!salesChart) {
        console.error('Chart not initialized');
        return;
    }

    let data = graphData[currentTimeFrame];
    if (!data || !data.labels || !data.revenue || !data.orders) {
        console.error('Invalid data format for timeframe:', currentTimeFrame);
        return;
    }
    data.labels.sort((a, b) => new Date(a) - new Date(b));

console.log("jkljj",data.labels);
   
    let combinedData = data.labels.map((label, index) => {
        let dateParts = label.split('-'); // Assuming format: YYYY-MM-DD or YYYY-MM
        let year = parseInt(dateParts[0]);
        let month = dateParts[1] ? parseInt(dateParts[1]) - 1 : 0; // Adjust for JS months (0-based)
        let day = dateParts[2] ? parseInt(dateParts[2]) : 1; // Default to 1 if not available

        return {
            label,
            date: new Date(year, month, day), // Create Date object
            revenue: data.revenue[index],
            orders: data.orders[index]
        };
    });

    console.log("combinedData",combinedData);
    
 
    // Extract sorted values
    const sortedLabels = combinedData.map(item => item.label);
    const sortedRevenue = combinedData.map(item => item.revenue);
    const sortedOrders = combinedData.map(item => item.orders);

    console.log('Sorted data (by Year first):', sortedLabels);

    salesChart.data.labels = sortedLabels;
    salesChart.data.datasets[0].data = sortedRevenue;
    salesChart.data.datasets[1].data = sortedOrders;
    salesChart.update();
}

        function changeTimeFrame(timeFrame) {
            console.log('Changing timeframe to:', timeFrame);
            currentTimeFrame = timeFrame;
            document.querySelectorAll('.chart-type-buttons .btn').forEach(btn => {
                btn.classList.remove('active');
                if (btn.textContent.toLowerCase().includes(timeFrame)) {
                    btn.classList.add('active');
                }
            });
            updateChart();
        }

        function toggleChartType(type) {
            currentChartType = type;
            salesChart.destroy();
            initializeChart();
        }

        function applyDateFilter() {
            const startDate = document.getElementById('startDateFilter').value;
    const endDate = document.getElementById('endDateFilter').value;
    
    if (!startDate || !endDate) {
      alert('Please select both start and end dates');
      return;
    }

    const urlParams = new URLSearchParams(window.location.search);
    urlParams.set('startDate', startDate);
    urlParams.set('endDate', endDate);
    urlParams.set('type', selectedReportType); 
    
    window.location.href = `${window.location.pathname}?${urlParams.toString()}`;
        }

        function clearDateFilter() {
            document.getElementById('startDateFilter').value = '';
           document.getElementById('endDateFilter').value = '';
    
    const urlParams = new URLSearchParams(window.location.search);
    urlParams.delete('startDate');
    urlParams.delete('endDate');
    urlParams.set('type', selectedReportType); 
    urlParams.set('page', '1'); 
    
    window.location.href = `${window.location.pathname}?${urlParams.toString()}`;
        }

        // Initialize the chart when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Available data:', graphData);
            initializeChart();
        });
    </script>
</body>
</html> 